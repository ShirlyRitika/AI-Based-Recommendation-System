import org.apache.mahout.cf.taste.eval.*;
import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import java.io.File;
import java.util.List;

public class RecommendationApp {
    public static void main(String[] args) {
        try {
            File dataFile = new File("src/main/resources/preferences.csv");
            DataModel model = new FileDataModel(dataFile);
            UserSimilarity similarity = new PearsonCorrelationSimilarity(model);
            UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);
            GenericUserBasedRecommender recommender =
                    new GenericUserBasedRecommender(model, neighborhood, similarity);
            for (LongPrimitiveIterator users = model.getUserIDs(); users.hasNext(); ) {
                long userId = users.nextLong();
                List<RecommendedItem> recommendations = recommender.recommend(userId, 2);
                System.out.println("\nUser " + userId + " recommendations:");
                for (RecommendedItem recommendation : recommendations) {
                    System.out.printf("  Item: %d, Score: %.2f\n",
                            recommendation.getItemID(), recommendation.getValue());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
